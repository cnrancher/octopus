syntax = 'proto3';

package v1alpha1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

message Empty {
}

// Registration is the service advertised by the Limb,
// any adaptor start its service until Limb approved this register request.
service Registration {
    rpc Register (RegisterRequest) returns (Empty) {
    }
}

message RegisterRequest {
    // Name of the adaptor in the form `adaptor-vendor.com/adaptor-name`.
    string name = 1;
    // Version of the API the adaptor was built against.
    string version = 2;
    // Name of the unix socket the adaptor is listening on, it's in the form `*.sock`.
    string endpoint = 3;
}

// Connection is the service advertised by the adaptor.
service Connection {
    rpc Connect (stream ConnectRequest) returns (stream ConnectResponse) {
    }
}

message ConnectRequestReferenceEntry {
    map<string, bytes> items = 1;
}

message ConnectRequest {
    // [Deprecated] Parameters for the connection, it's in form JSON bytes.
    bytes parameters = 1;
    // Model for the device.
    k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta model = 2;
    // Desired device, it's in form JSON bytes.
    bytes device = 3;
    // References for the device, i.e: Secret, ConfigMap and Downward API.
    map<string, ConnectRequestReferenceEntry> references = 4;
}

message ConnectResponse {
    // Observed device, it's in form JSON bytes.
    bytes device = 1;
}
