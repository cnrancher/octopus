/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/rancher/octopus/pkg/adaptor/api/v1alpha1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockRegistrationClient is a mock of RegistrationClient interface
type MockRegistrationClient struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationClientMockRecorder
}

// MockRegistrationClientMockRecorder is the mock recorder for MockRegistrationClient
type MockRegistrationClientMockRecorder struct {
	mock *MockRegistrationClient
}

// NewMockRegistrationClient creates a new mock instance
func NewMockRegistrationClient(ctrl *gomock.Controller) *MockRegistrationClient {
	mock := &MockRegistrationClient{ctrl: ctrl}
	mock.recorder = &MockRegistrationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistrationClient) EXPECT() *MockRegistrationClientMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockRegistrationClient) Register(arg0 context.Context, arg1 *v1alpha1.RegisterRequest, arg2 ...grpc.CallOption) (*v1alpha1.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockRegistrationClientMockRecorder) Register(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrationClient)(nil).Register), varargs...)
}

// MockRegistrationServer is a mock of RegistrationServer interface
type MockRegistrationServer struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationServerMockRecorder
}

// MockRegistrationServerMockRecorder is the mock recorder for MockRegistrationServer
type MockRegistrationServerMockRecorder struct {
	mock *MockRegistrationServer
}

// NewMockRegistrationServer creates a new mock instance
func NewMockRegistrationServer(ctrl *gomock.Controller) *MockRegistrationServer {
	mock := &MockRegistrationServer{ctrl: ctrl}
	mock.recorder = &MockRegistrationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistrationServer) EXPECT() *MockRegistrationServerMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockRegistrationServer) Register(arg0 context.Context, arg1 *v1alpha1.RegisterRequest) (*v1alpha1.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockRegistrationServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrationServer)(nil).Register), arg0, arg1)
}

// MockConnectionClient is a mock of ConnectionClient interface
type MockConnectionClient struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionClientMockRecorder
}

// MockConnectionClientMockRecorder is the mock recorder for MockConnectionClient
type MockConnectionClientMockRecorder struct {
	mock *MockConnectionClient
}

// NewMockConnectionClient creates a new mock instance
func NewMockConnectionClient(ctrl *gomock.Controller) *MockConnectionClient {
	mock := &MockConnectionClient{ctrl: ctrl}
	mock.recorder = &MockConnectionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnectionClient) EXPECT() *MockConnectionClientMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockConnectionClient) Connect(arg0 context.Context, arg1 ...grpc.CallOption) (v1alpha1.Connection_ConnectClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Connect", varargs...)
	ret0, _ := ret[0].(v1alpha1.Connection_ConnectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect
func (mr *MockConnectionClientMockRecorder) Connect(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnectionClient)(nil).Connect), varargs...)
}

// MockConnection_ConnectClient is a mock of Connection_ConnectClient interface
type MockConnection_ConnectClient struct {
	ctrl     *gomock.Controller
	recorder *MockConnection_ConnectClientMockRecorder
}

// MockConnection_ConnectClientMockRecorder is the mock recorder for MockConnection_ConnectClient
type MockConnection_ConnectClientMockRecorder struct {
	mock *MockConnection_ConnectClient
}

// NewMockConnection_ConnectClient creates a new mock instance
func NewMockConnection_ConnectClient(ctrl *gomock.Controller) *MockConnection_ConnectClient {
	mock := &MockConnection_ConnectClient{ctrl: ctrl}
	mock.recorder = &MockConnection_ConnectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnection_ConnectClient) EXPECT() *MockConnection_ConnectClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockConnection_ConnectClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockConnection_ConnectClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConnection_ConnectClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockConnection_ConnectClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockConnection_ConnectClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConnection_ConnectClient)(nil).Context))
}

// Header mocks base method
func (m *MockConnection_ConnectClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockConnection_ConnectClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockConnection_ConnectClient)(nil).Header))
}

// Recv mocks base method
func (m *MockConnection_ConnectClient) Recv() (*v1alpha1.ConnectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1alpha1.ConnectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockConnection_ConnectClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConnection_ConnectClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockConnection_ConnectClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockConnection_ConnectClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConnection_ConnectClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockConnection_ConnectClient) Send(arg0 *v1alpha1.ConnectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockConnection_ConnectClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConnection_ConnectClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockConnection_ConnectClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockConnection_ConnectClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConnection_ConnectClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockConnection_ConnectClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockConnection_ConnectClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockConnection_ConnectClient)(nil).Trailer))
}

// MockConnectionServer is a mock of ConnectionServer interface
type MockConnectionServer struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionServerMockRecorder
}

// MockConnectionServerMockRecorder is the mock recorder for MockConnectionServer
type MockConnectionServerMockRecorder struct {
	mock *MockConnectionServer
}

// NewMockConnectionServer creates a new mock instance
func NewMockConnectionServer(ctrl *gomock.Controller) *MockConnectionServer {
	mock := &MockConnectionServer{ctrl: ctrl}
	mock.recorder = &MockConnectionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnectionServer) EXPECT() *MockConnectionServerMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockConnectionServer) Connect(arg0 v1alpha1.Connection_ConnectServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockConnectionServerMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnectionServer)(nil).Connect), arg0)
}

// MockConnection_ConnectServer is a mock of Connection_ConnectServer interface
type MockConnection_ConnectServer struct {
	ctrl     *gomock.Controller
	recorder *MockConnection_ConnectServerMockRecorder
}

// MockConnection_ConnectServerMockRecorder is the mock recorder for MockConnection_ConnectServer
type MockConnection_ConnectServerMockRecorder struct {
	mock *MockConnection_ConnectServer
}

// NewMockConnection_ConnectServer creates a new mock instance
func NewMockConnection_ConnectServer(ctrl *gomock.Controller) *MockConnection_ConnectServer {
	mock := &MockConnection_ConnectServer{ctrl: ctrl}
	mock.recorder = &MockConnection_ConnectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnection_ConnectServer) EXPECT() *MockConnection_ConnectServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockConnection_ConnectServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockConnection_ConnectServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConnection_ConnectServer)(nil).Context))
}

// Recv mocks base method
func (m *MockConnection_ConnectServer) Recv() (*v1alpha1.ConnectRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1alpha1.ConnectRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockConnection_ConnectServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConnection_ConnectServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockConnection_ConnectServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockConnection_ConnectServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConnection_ConnectServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockConnection_ConnectServer) Send(arg0 *v1alpha1.ConnectResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockConnection_ConnectServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConnection_ConnectServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockConnection_ConnectServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockConnection_ConnectServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockConnection_ConnectServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockConnection_ConnectServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockConnection_ConnectServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConnection_ConnectServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockConnection_ConnectServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockConnection_ConnectServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockConnection_ConnectServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockConnection_ConnectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockConnection_ConnectServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockConnection_ConnectServer)(nil).SetTrailer), arg0)
}
